name: Build LLVM (matrix)

on:
  workflow_dispatch:
    inputs:
      llvm_tag:
        description: "Tag (e.g. llvmorg-21.1.1) or ref for llvm/llvm-project"
        required: false
        default: llvmorg-21.1.1
  pull_request:
    branches: [ main ]
    paths:
     - '.github/workflows/llvm-ci-u22.yml'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:
    name: build-u22
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    env:
      # manual input → repo/org var → default
      LLVM_TAG: ${{ github.event.inputs.llvm_tag || vars.LLVM_TAG || 'llvmorg-21.1.1' }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # --- calm the git default-branch hint ---
      - name: Silence git default-branch hint
        run: git config --global init.defaultBranch main

      # ---------- Prereqs ----------
      - name: Install prerequisites (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git cmake ninja-build build-essential zip
          python -m pip install --upgrade pip

      # ---------- Compute install prefix ----------
      - name: Compute install prefix
        id: prefix
        run: |
          set -euo pipefail
          if [ "${RUNNER_OS}" = "Windows" ]; then
            echo "prefix=${RUNNER_TEMP}\\llvm-install" >> "$GITHUB_OUTPUT"
          else
            echo "prefix=${RUNNER_TEMP}/llvm-install" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Build *nix ----------
      - name: Build (Linux & macOS)
        env:
          CMAKE_INSTALL_PREFIX: ${{ steps.prefix.outputs.prefix }}
        run: |
          set -euo pipefail
          echo "Using LLVM_TAG=${LLVM_TAG}"

          mkdir -p llvm-project
          cd llvm-project
          git init
          git remote add origin https://github.com/llvm/llvm-project.git
          git fetch --depth 1 origin "${LLVM_TAG}"
          git checkout --detach FETCH_HEAD

          python3 -m pip install -r mlir/python/requirements.txt

          cmake -S llvm -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}" \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_BUILD_UTILS=ON -DLLVM_BUILD_TOOLS=ON \
            -DLLVM_INSTALL_UTILS=ON \
            -DLLVM_ENABLE_PROJECTS="clang;lld;mlir" \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DLLVM_TARGETS_TO_BUILD="host;NVPTX;AMDGPU" \
            -DLLVM_ENABLE_TERMINFO=OFF

          cmake --build build --target all -- -k 0
          cmake --build build --target check-mlir
          cmake --build build --target install

      # ----------  compute package naming ----------
      - name: Compute package name
        id: pkgmeta
        shell: bash
        run: |
          set -euo pipefail
          os="${RUNNER_OS}"
          arch="$(uname -m || true)"
          case "$os" in
            Linux)
              if [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then suffix="linux-aarch64"; else suffix="linux-x86_64"; fi
              ;;
            macOS)  suffix="macos-arm64" ;; # macos-15 runners are Apple Silicon
            Windows) suffix="windows-amd64" ;;
          esac
          echo "suffix=$suffix" >> "$GITHUB_OUTPUT"
          echo "zip=taichi-llvm-21-$suffix.zip" >> "$GITHUB_OUTPUT"

      # ----------  package (Linux/macOS) ----------
      - name: Package (Linux/macOS)
        env:
          CMAKE_INSTALL_PREFIX: ${{ steps.prefix.outputs.prefix }}
        run: |
          set -euo pipefail
          pkgroot="${RUNNER_TEMP}/taichi-llvm-21-${{ steps.pkgmeta.outputs.suffix }}"
          mkdir -p "$pkgroot"
          # copy install tree
          cp -R "${CMAKE_INSTALL_PREFIX}/." "$pkgroot/"
          # bundle license
          cp llvm-project/LICENSE.TXT "$pkgroot/LLVM-LICENSE.txt" || true
          # optional strip to shrink size
          if [ -x "${CMAKE_INSTALL_PREFIX}/bin/llvm-strip" ]; then
            find "$pkgroot/bin" -type f -exec "${CMAKE_INSTALL_PREFIX}/bin/llvm-strip" --strip-unneeded {} + || true
            find "$pkgroot/lib" -type f \( -name "*.so*" -o -name "*.dylib" -o -name "*.a" \) \
              -exec "${CMAKE_INSTALL_PREFIX}/bin/llvm-strip" --strip-unneeded {} + || true
          fi
          ( cd "${RUNNER_TEMP}" && zip -r "${GITHUB_WORKSPACE}/${{ steps.pkgmeta.outputs.zip }}" \
              "taichi-llvm-21-${{ steps.pkgmeta.outputs.suffix }}" )
          # sha256
          ( cd "${GITHUB_WORKSPACE}" && shasum -a 256 "${{ steps.pkgmeta.outputs.zip }}" > "${{ steps.pkgmeta.outputs.zip }}.sha256" || sha256sum "${{ steps.pkgmeta.outputs.zip }}" > "${{ steps.pkgmeta.outputs.zip }}.sha256" )

      # ---------- Upload artifacts (for aggregator) ----------
      - name: Upload packaged asset
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pkgmeta.outputs.zip }}
          path: |
            ${{ github.workspace }}/${{ steps.pkgmeta.outputs.zip }}
            ${{ github.workspace }}/${{ steps.pkgmeta.outputs.zip }}.sha256
          if-no-files-found: error
